"use strict";
// Buffer Source Conversion
// ------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.unsafeCompareBufferSources = exports.unsafeCompareUint8Arrays = exports.compareBufferSources = exports.compareUint8Arrays = exports.splitBufferSource = exports.splitUint8Array = exports.concatBufferSources = exports.concatUint8Arrays = exports.bytesToHexString = exports.bytesToHexArray = exports.hexStringToBytes = exports.hexToByte = exports.byteToHex = exports.bufferSourceToDataView = exports.bufferSourceToUint8Array = void 0;
const bufferSourceToUint8Array = (bs) => bs instanceof ArrayBuffer
    ? new Uint8Array(bs)
    : new Uint8Array(bs.buffer, bs.byteOffset, bs.byteLength);
exports.bufferSourceToUint8Array = bufferSourceToUint8Array;
const bufferSourceToDataView = (bs) => bs instanceof ArrayBuffer
    ? new DataView(bs)
    : new DataView(bs.buffer, bs.byteOffset, bs.byteLength);
exports.bufferSourceToDataView = bufferSourceToDataView;
const bs2u8 = exports.bufferSourceToUint8Array;
const bs2dv = exports.bufferSourceToDataView;
// Hex Functions
// -------------
const byteToHex = (byte) => byte.toString(16).padStart(2, '0');
exports.byteToHex = byteToHex;
const hexToByte = (hexOctet) => parseInt(hexOctet, 16);
exports.hexToByte = hexToByte;
const hexStringToBytes = (hexString) => {
    var _a, _b;
    return new Uint8Array((_b = (_a = hexString.replace(/[^0-9a-f]/ig, '').match(/[0-9a-f]{1,2}/ig)) === null || _a === void 0 ? void 0 : _a.map(exports.hexToByte)) !== null && _b !== void 0 ? _b : []);
};
exports.hexStringToBytes = hexStringToBytes;
const bytesToHexArray = (bufferSource) => Array.from(bs2u8(bufferSource), byte => exports.byteToHex(byte));
exports.bytesToHexArray = bytesToHexArray;
const bytesToHexString = (bufferSource) => exports.bytesToHexArray(bufferSource).join('');
exports.bytesToHexString = bytesToHexString;
// Concatenation
// -------------
function concatUint8Arrays(...uint8Arrays) {
    const size = uint8Arrays.reduce((size, u8) => size + u8.length, 0);
    const res = new Uint8Array(size);
    let i = 0;
    for (const u8 of uint8Arrays) {
        res.set(u8, i);
        i += u8.length;
    }
    return res;
}
exports.concatUint8Arrays = concatUint8Arrays;
function concatBufferSources(...bufferSources) {
    return concatUint8Arrays(...bufferSources.map(bs2u8));
}
exports.concatBufferSources = concatBufferSources;
// Splitting
// ---------
function splitUint8Array(uint8Array, ...indices) {
    const result = new Array(indices.length + 1);
    let prev = 0;
    let i = 0;
    for (const index of indices) {
        result[i++] = uint8Array.subarray(prev, index);
        prev = index;
    }
    result[i] = uint8Array.subarray(prev);
    return result;
}
exports.splitUint8Array = splitUint8Array;
function splitBufferSource(bufferSource, ...indices) {
    return splitUint8Array(bs2u8(bufferSource), ...indices);
}
exports.splitBufferSource = splitBufferSource;
// Comparison
// ----------
function compareUint8Arrays(u8_1, ...u8s) {
    if (u8s.some(u8_i => u8_1.byteLength !== u8_i.byteLength))
        return false;
    let res = true;
    for (const u8_i of u8s) {
        for (let i = 0; i !== u8_1.length; i++) {
            const r = u8_1[i] === u8_i[i];
            res = r && res;
        }
    }
    return res;
}
exports.compareUint8Arrays = compareUint8Arrays;
function compareDataViewsUint32(dv_1, ...dvs) {
    if (dvs.some(dv_i => dv_1.byteLength !== dv_i.byteLength))
        return false;
    let res = true;
    for (const dv_i of dvs) {
        let i = 0;
        for (i; i < dv_1.byteLength - 3; i += 4) {
            const r = dv_1.getUint32(i) === dv_i.getUint32(i);
            res = r && res;
        }
        for (i; i < dv_1.byteLength; i++) {
            const r = dv_1.getUint8(i) === dv_i.getUint8(i);
            res = r && res;
        }
    }
    return res;
}
function compareBufferSources(bufferSource, ...bufferSources) {
    return compareDataViewsUint32(bs2dv(bufferSource), ...bufferSources.map(bs2dv));
}
exports.compareBufferSources = compareBufferSources;
function unsafeCompareUint8Arrays(u8_1, ...u8s) {
    if (u8s.some(u8_i => u8_1.byteLength !== u8_i.byteLength))
        return false;
    return u8s.every(u8_i => {
        for (let i = 0; i !== u8_1.length; i++)
            if (u8_1[i] !== u8_i[i])
                return false;
        return true;
    });
}
exports.unsafeCompareUint8Arrays = unsafeCompareUint8Arrays;
function unsafeCompareDataViewsUint32(dv_1, ...dvs) {
    if (dvs.some((dv_i) => dv_1.byteLength !== dv_i.byteLength))
        return false;
    return dvs.every(dv_i => {
        let i = 0;
        for (i; i < dv_i.byteLength - 3; i += 4)
            if (dv_1.getUint32(i) !== dv_i.getUint32(i))
                return false;
        for (i; i < dv_1.byteLength; i++)
            if (dv_1.getUint8(i) === dv_i.getUint8(i))
                return false;
        return true;
    });
}
function unsafeCompareBufferSources(bufferSource, ...bufferSources) {
    return unsafeCompareDataViewsUint32(bs2dv(bufferSource), ...bufferSources.map(bs2dv));
}
exports.unsafeCompareBufferSources = unsafeCompareBufferSources;
//# sourceMappingURL=index.cjs.map